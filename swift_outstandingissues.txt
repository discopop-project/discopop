DPInstrumentation: 

- when there is loop at end of file, ret dbg info shows line 0 causing an abort, always need to have
one extra instruction after the loop in swift(okay for loops in function)
- datastructure access over standardlibraries needs to be handled seperately and differently

- finding of true exit blocks just like in swift 


CUGeneration: 
- datastructure access variable names
- global variable names (detect global variable for differentiation/global to BB vs global to program)


DPReduction: 
- no labels for version 5.1 but ongoing from version 5.2 (ignore incompatibility bc swift 5.2 is based on llvm 9 while dp is 8)
- MUST fix loop line issue otherwise pattern cannot be detected (explorer/utils)
+ fix for global variables
+ fix looplineid error(done)

+ fix all passes for array accessing, fix reduction for global variables
+ remove statically coded issues like loopline or index block
(what if more dependencies that inhibit reduction in reduction?)
+ try for doall, find implementation




-> compiling the ir and linking with libs does cause segfault when running if swift program includes array
-> can run with lli but not force interpreter because some function call types are not implemented for it
-> edited cmakelist for rtlib to compile a shared library for this case that can be loaded with lli because static libs or archives cannot(need to link lpthread too)
-> change part in ifunctions about selfpath because it is not a standalone executable but rather lli is the executing process doing jit

-> command:
li-8 -load="/home/simonschmalfuss/swift-5.1/swift-5.1.5-RELEASE-ubuntu18.04/usr/lib/swift/linux/libswiftCore.so" 
-load="/home/simonschmalfuss/swift-5.1/swift-5.1.5-RELEASE-ubuntu18.04/usr/lib/swift/linux/libswiftSwiftOnoneSupport.so" 
-load="/home/simonschmalfuss/discopop/build/rtlib/libmyruntime.so" 
-force-interpreter=false instrumented.ll