# This file is part of the DiscoPoP software (http://www.discopop.tu-darmstadt.de)
#
# Copyright (c) 2020, Technische Universitaet Darmstadt, Germany
#
# This software may be modified and distributed under the terms of
# the 3-Clause BSD License.  See the LICENSE file in the package base
# directory for details.

name: "DiscoPoP CI"
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '**'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  execute_license_check:
    runs-on: self-hosted
    name: License check
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: "Github SHA"
        run: |
          echo "Hello from: ${{ github.sha }}"

      - name: "Check all files for DiscoPoP License tag"
        run: |
          ./scripts/dev/check-license.sh $(find . -type f)

  prepare_ci_base:
    runs-on: self-hosted
    name: Build base container
    needs: execute_license_check
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Build docker image discopop_ci_base
        run: |
          docker build -f .github/workflows/Dockerfile_ci_base -t discopop_ci_base .

  prepare_ci_container:
    runs-on: self-hosted
    name: Build CI container
    needs: prepare_ci_base
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Build docker image discopop_ci_${{ github.sha }}
        run: |
          docker build -f .github/workflows/Dockerfile_ci -t discopop_ci_${{ github.sha }} --no-cache .

  code_check_mypy_explorer:
    runs-on: self-hosted
    name: "Type check: Explorer"
    needs: prepare_ci_container
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: "Run MyPy Type Checker - DiscoPoP Explorer"
        run: |
          docker run --rm discopop_ci_${{ github.sha }} python -m mypy --config-file=mypy.ini -p discopop_explorer

  code_check_mypy_library:
    runs-on: self-hosted
    name: "Type check: Library"
    needs: prepare_ci_container
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: "Run MyPy Type Checker - DiscoPoP Library"
        run: |
          docker run --rm discopop_ci_${{ github.sha }} python -m mypy --config-file=mypy.ini -p discopop_library

  code_check_black_explorer:
    runs-on: self-hosted
    name: "Format check: Explorer"
    needs: prepare_ci_container
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: "Check formatting of DiscoPoP Explorer"
        run: |
          docker run --rm discopop_ci_${{ github.sha }} python -m black -l 120 --check discopop_explorer

  code_check_black_library:
    runs-on: self-hosted
    name: "Format check: Library"
    needs: prepare_ci_container
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: "Check formatting of DiscoPoP Library"
        run: |
          docker run --rm discopop_ci_${{ github.sha }} python -m black -l 120 --check discopop_library

  execute_cxx_unit_tests:
    runs-on: self-hosted
    name: Execute C++ unit tests
    needs: [code_check_mypy_explorer, code_check_mypy_library, code_check_black_explorer, code_check_black_library]
    steps:
      - name: C++ unit tests
        run: |
          docker run --rm discopop_ci_${{ github.sha }} build/test/unit_tests/DiscoPoP_UT

  execute_end_to_end_tests:
    runs-on: self-hosted
    name: Execute end-to-end tests
    needs: [code_check_mypy_explorer, code_check_mypy_library, code_check_black_explorer, code_check_black_library]
    steps:
      - name: Python end-to-end-tests
        run: |
          docker run --rm discopop_ci_${{ github.sha }} python -m unittest -v -k *.end_to_end.*

  checks_successful:
    runs-on: self-hostd
    name: Checks successful
    needs: [execute_cxx_unit_tests, execute_end_to_end_tests]
    steps:
      - name: Report
        run: |
          echo "All checks successful!"

  cleanup:
    runs-on: self-hosted
    name: Cleanup
    if: always()
    needs: [prepare_ci_base, prepare_ci_container, execute_cxx_unit_tests, execute_end_to_end_tests]
    steps:
      - name: Cleanup temporary docker image discopop_ci_${{ github.sha }}
        run: |
          if [ ! -z "$(docker images -q discopop_ci_${{ github.sha }} 2> /dev/null)" ]; then
            docker image rm discopop_ci_${{ github.sha }}
          fi
